# This is a basic workflow to help you get started with Actions

name: CICD
on:
  push:

permissions:
  contents: read
  pull-requests: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54
          args: -c .golangci.yml
          only-new-issues: true

  tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      pubsub_emulator:
        image: 3apag/pubsub-emulator
        env:
          PUBSUB_PROJECT_ID: webdevelop-live
          PUBSUB_LISTEN_ADDRESS: 0.0.0.0:8232
        ports:
          - 8232:8232

      # Label used to access the service container
      postgres:
        image: postgres
        ports:
          - 5439:5439
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: password
          PGPORT: 5439
          POSTGRES_PORT: 5439
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5     
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.22' # The Go version to download (if necessary) and use.

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Run build of the application
    - name: Run make install
      run: ./make.sh install

    - name: Save secret
      run: mkdir -p ~/.config/gcloud && echo $GCP_CREDS > ~/.config/gcloud/application_default_credentials.json
      env:
        GCP_CREDS : ${{secrets.GCP_PUBSUB_SERVICE_ACCOUNT_CREDENTIALS}}

    - name: Run tests
      run: TEST_APP_START="true" ./make.sh test